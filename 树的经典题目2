
/*
     * 非递归实现二叉树的中序遍历
     */
    public ArrayList<Integer> inorderTraversal(TreeNode root) {
        Stack<TreeNode> stack = new Stack<TreeNode>();
        ArrayList<Integer> res = new ArrayList<Integer>();
        TreeNode node = root;
        while (!stack.isEmpty() || node != null) {
            while (node != null) {
                stack.push(node);
                node = node.left;
            }
 
            node = stack.pop();
            res.add(node.val);
            node = node.right;
 
        }
        return res;
    }



1. Given a binary tree containing digits from0-9only, each root-to-leaf path could represent a number.
An example is the root-to-leaf path1->2->3which represents the number123.
Find the total sum of all root-to-leaf numbers.
For example,
    1
   / \
  2   3

The root-to-leaf path1->2represents the number12.
The root-to-leaf path1->3represents the number13.
Return the sum = 12 + 13 =25.

              /**
               * Definition for binary tree
               * public class TreeNode {
               *     int val;
               *     TreeNode left;
               *     TreeNode right;
               *     TreeNode(int x) { val = x; }
               * }
               */
              public class Solution {
              public int sumNumbers(TreeNode root) {
                  int sum = 0;
                  if (root == null) {
                      return sum;
                  }
                  return preorderSumNumbers(root, sum);
              }
              public int preorderSumNumbers(TreeNode root, int sum) {
                  if (root == null)
                      return 0;
                  sum = sum * 10 + root.val;
                  if (root.left == null && root.right == null) {
                      return sum;
                  }
                  return preorderSumNumbers(root.left, sum) + preorderSumNumbers(root.right, sum);
              }
              }
              

2.Given a binary tree, find the maximum path sum.
  The path may start and end at any node in the tree.
  For example:
  Given the below binary tree,
         1
        / \
       2   3

  Return6.              
              public class Solution {
                int maxsum = Integer.MIN_VALUE;// 初始化为最小值

                    public int maxPathSum(TreeNode root) {
                        if (root == null)
                            return 0;

                        maxSum(root);
                        return maxsum;
                    }

                    public int maxSum(TreeNode root) {

                        if (root == null)
                            return 0;
                        int left = maxSum(root.left);
                        int right = maxSum(root.right);
                        int sum = root.val;
                        if (left > 0)
                            sum += left;
                        if (right > 0)
                            sum += right;
                        if (maxsum < sum)
                            maxsum = sum;
                        return Math.max(left, right) > 0 ? Math.max(left, right) + root.val : root.val;
                    }
                  }
              
3. Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.
For example:
Given the below binary tree andsum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]             

                  import java.util.ArrayList;

                  public class Solution {
                      ArrayList<ArrayList<Integer>> results;
                      public ArrayList<ArrayList<Integer>> pathSum(TreeNode root, int sum) {
                          results = new ArrayList<ArrayList<Integer>>();
                          if (root == null)
                              return results;

                          ArrayList<Integer> result = new ArrayList<Integer>();
                          pathSum(root, 0, sum, result);

                          return results;
                      }

                      public void pathSum(TreeNode root, int res, int sum, ArrayList<Integer> result) {
                          if (root == null)
                              return;
                          else if (root.left == null && root.right == null) {
                              if (res + root.val == sum) {
                                  result.add(root.val);
                                  results.add(new ArrayList<Integer>(result));
                                  result.remove(result.size()-1);
                              }
                          } else {
                              result.add(root.val);
                              pathSum(root.left, res + root.val, sum, result);
                              pathSum(root.right, res + root.val, sum, result);
                              result.remove(result.size()-1);
                          }
                      }
                  }              
              
  
4.Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up
  all the values along the path equals the given sum.
For example:
Given the below binary tree andsum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
return true, as there exist a root-to-leaf path5->4->11->2which sum is 22.
            
            public class Solution {
                  public boolean hasPathSum(TreeNode root, int sum) {
                      if (root == null)
                          return false;

                      sum -= root.val;
                      if (sum == 0 && root.left == null && root.right == null)
                          return true;

                      return hasPathSum(root.left, sum) || hasPathSum(root.right, sum);
                  }
              }           
              
  5.Two elements of a binary search tree (BST) are swapped by mistake.
    Recover the tree without changing its structure.
    Note: 
    A solution using O(n ) space is pretty straight forward. Could you devise a constant space solution?

    confused what"{1,#,2,3}"means? > read more on how binary tree is serialized on OJ.

    OJ's Binary Tree Serialization:
    The serialization of a binary tree follows a level order traversal,
    where '#' signifies a path terminator where no node exists below.
    Here's an example:
       1
      / \
     2   3
        /
       4
        \
         5
    The above binary tree is serialized as"{1,2,3,#,#,4,#,#,5}".            
              
                        import java.util.ArrayList;
                        import java.util.List;
                        public class Solution {
                          TreeNode pre, mistake1, mistake2;
     
                          // O(n)空间方法就是中序遍历记录BST的所有节点，然后遍历两遍找到两个错误节点
                          public void recoverTree(TreeNode root) {
                              if(root == null)
                                  return;

                              List<TreeNode> list = new ArrayList<>();
                              inOrder(root, list);
                              for(int i = 0; i < list.size() - 1; i++){
                                  if(list.get(i).val > list.get(i + 1).val){
                                      mistake1 = list.get(i);
                                      break;
                                  }
                              }
                              for(int i = list.size() - 1; i > 0; i--){
                                  if(list.get(i).val < list.get(i - 1).val){
                                      mistake2 = list.get(i);
                                      break;
                                  }
                              }

                              int val = mistake1.val;
                              mistake1.val= mistake2.val;
                              mistake2.val = val;
                          }

                          // O(n)
                          public void inOrder(TreeNode root, List<TreeNode> list) {
                              if(root == null)
                                  return;

                              inOrder(root.left, list);
                              list.add(root);
                              inOrder(root.right, list);

                          }
                      }       
              
  6. Given a binary tree, determine if it is a valid binary search tree (BST).
    Assume a BST is defined as follows:
    The left subtree of a node contains only nodes with keys less than the node's key.
    The right subtree of a node contains only nodes with keys greater than the node's key.
    Both the left and right subtrees must also be binary search trees. 
    
    即判断一颗二叉树是否为二叉搜寻树
                    import java.util.Stack;
                    public class Solution {
                    public boolean isValidBST(TreeNode root) {
                            if (root == null)
                                return true;
                            Stack<TreeNode> stack = new Stack<TreeNode>();
                            TreeNode cur = root;
                            TreeNode pre = null;
                            while (!stack.isEmpty() || cur != null) {
                                if (cur == null) {
                                    cur = stack.pop();
                                    if (pre != null && pre.val >= cur.val)
                                        return false;
                                    pre = cur;
                                    cur = cur.right;
                                } else {

                                    stack.push(cur);
                                    cur = cur.left;
                                }
                            }
                            return true;
                        }
                    }           
              
  7. Given n, how many structurally unique BST's (binary search trees) that store values 1...n?
    For example,
    Given n = 3, there are a total of 5 unique BST's.
       1         3     3      2      1
        \       /     /      / \      \
         3     2     1      1   3      2
        /     /       \                 \
       2     1         2                 3

      我设dp[i]表示共有i个节点时，能产生的BST树的个数
      n == 0 时，空树的个数必然为1，因此dp[0] = 1
      n == 1 时，只有1这个根节点，数量也为1，因此dp[1] = 1
      n == 2时，有两种构造方法，如下图所示：
      加载中...
      因此，dp[2] = dp[0] * dp[1] + dp[1] * dp[0]
      n == 3时，构造方法如题目给的示例所示，dp[3] = dp[0] * dp[2] + dp[1] * dp[1] + dp[2] * dp[0]
      同时，当根节点元素为 1, 2, 3, 4, 5, ..., i, ..., n时，基于以下原则的BST树具有唯一性：
      以i为根节点时，其左子树构成为[0,...,i-1],其右子树构成为[i+1,...,n]构成
      因此，dp[i] = sigma（dp[0...k] * dp[k+1...i]） 0 <= k < i - 1

                    public static int numTrees(int n){
                           if(n<0){
                               return -1;
                           }
                           int[] dp=new int[n+1];
                           dp[0]=1;
                           dp[1]=1;
                           for(int i=2;i<=n;i++){
                               for(int j=0;j<i;j++){
                                   dp[i]+=dp[j]*dp[i-j-1];
                               }
                           }
                           return dp[n];
                       }
              
8.  Given n, generate all structurally unique BST's (binary search trees) that store values 1...n.
For example,
Given n = 3, your program should return all 5 unique BST's shown below.
   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

confused what"{1,#,2,3}"means? > read more on how binary tree is serialized on OJ.            
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
