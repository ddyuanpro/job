1. java之yield(),sleep(),wait()区别详解-备忘笔记（http://dylanxu.iteye.com/blog/1322066）
   1.1、sleep()
      使当前线程（即调用该方法的线程）暂停执行一段时间，让其他线程有机会继续执行，但它并不释放对象锁。
      也就是说如果有synchronized同步快，其他线程仍然不能访问共享数据。注意该方法要捕捉异常。
      
   sleep()可以使低优先级的线程得到执行的机会，当然也可以让同优先级、高优先级的线程有执行的机会。
  1.2、join()
	   join()方法使调用该方法的线程在此之前执行完毕，也就是等待该方法的线程执行完毕后再往下继续执行。注意该方法也需要捕捉异常。
  1.3、yield()
	   该方法与sleep()类似，只是不能由用户指定暂停多长时间，并且yield（）方法只能让同优先级的线程有执行的机会。
     wait()和notify()、notifyAll()
  1.4、wait()和notify()、notifyAll()
     这三个方法用于协调多个线程对共享数据的存取，所以必须在synchronized语句块内使用。synchronized关键字用于保护共享数据，阻止其他线程对共享数据的存取，
     但是这样程序的流程就很不灵活了，如何才能在当前线程还没退出synchronized数据块时让其他线程也有机会访问共享数据呢？此时就用这三个方法来灵活控制。
     
     wait()方法使当前线程暂停执行并释放对象锁标示，让其他线程可以进入synchronized数据块，当前线程被放入对象等待池中。
     当调用notify()方法后，将从对象的等待池中移走一个任意的线程并放到锁标志等待池中，只有锁标志等待池中线程能够获取锁标志；
     如果锁标志等待池中没有线程，则notify()不起作用。

     notifyAll()则从对象等待池中移走所有等待那个对象的线程并放到锁标志等待池中。

     注意 这三个方法都是java.lang.Object的方法。
  1.5、run和start()
     把需要处理的代码放到run()方法中，start()方法启动线程将自动调用run()方法，这个由java的内存机制规定的。
     并且run()方法必需是public访问权限，返回值类型为void。
 
 2. 使用抽象类时应注意一下几点：
    2.1、包含抽象方法的类称为抽象类，但并不意味着抽象类中只能有抽象方法，它和普通类一样，同样可以拥有成员变量和普通的成员方法
    2.2、如果一个非抽象类继承了抽象类，则非抽象类必须实现抽象父类的 所有抽象方法
    2.3、子类中的抽象方法不能与父类的抽象方法同名
    2.4、抽象类不能创建实体，因为抽象类存在抽象方法，而抽象方法没有实体，创建对象后，抽象对象调用抽象方法是没有意义的
    2.5、 抽象类中一定有构造函数。主要为了初始化抽象类中的属性。通常由子类实现
    2.6、final 和 abstract 是否可以同时修饰一个方法，因为用final修饰后，修饰类代表不可以继承 ，修饰方法不可重写， 
        abstract 修饰类就是用来被继承的，修饰方法就是用来被重写的
        abstract不能与private修饰同一个方法，因为privte成员对外是不可见的，只能在本类中使用，这样子类就无法重写抽象方法
        abstract不能与static修饰同一个方法，static 修饰的方法可以用类名调用，而 对于 abstract 修饰的方法没有具体的方法实现，所有不能直接调用
        
  3.在使用接口过程中需要注意如下几个问题：
    3.1、一个Interface的方所有法访问权限自动被声明为public。确切的说只能为public ，当然你可以显示的声明为protected、private，但是编译会出错！
    3.2、接口中定义的所有变量默认是 public static final 的，即静态常量既然是常量，那么定义的时候必须 赋值 ， 
          可以通过接口名直接访问：ImplementClass.name。
    3.3、接口中定义的方法不能有方法体。接口中定义的方法默认添加 public abstract
    3.4、有抽象函数的不一定是抽象类，也可以是接口类。
    3.5、由于接口中的方法默认都是抽象的，所以接口不能被实例化。
    3.6、类实现接口通过implements实现，实现接口的非抽象类必须要实现该接口的 所有方法 ，抽象类可以不用实现。
    3.7、如果实现类要访问接口中的成员，不能使用 super 关键字。因为两者之间没有显示的继承关系，况且接口中的成员成员属性是静态的
    3.8、接口没有构造方法。
    3.9、不能使用new操作符实例化一个接口，但可以声明一个接口变量，该变量必须引用（refer to)一个实现该接口的类的对象。
          可以使用 instanceof 检查一个对象是否实现了某个特定的接口。
         例如：if(anObject instanceof Comparable){}。
    3.10 在实现多接口的时候一定要避免方法名的重复。
    
  4.抽象类和接口的区别
    4.1、语法层面上的区别
      1）抽象类可以提供成员方法的实现细节(即普通方法)，而接口中只能存在public abstract 方法；
      2）抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的；
      3）接口中不能含有静态代码块以及静态方法，而抽象类可以有静态代码块和静态方法；
      4）一个类只能继承一个抽象类，而一个类却可以实现多个接口， Java是单继承，多实现 。

    4.2、设计层面上的区别
      1） 抽象类是对一种事物的抽象，即对类抽象，而接口是对行为的抽象。抽象类是对整个类整体进行抽象，包括属性、行为，
          但是接口却是对类局部（行为）进行抽象。
      2） 抽象类所体现的是一种继承关系，而继承是一个 “is-a”的关系，而 接口 实现则是 “has-a”的关系。
          如果一个类继承了某个抽象类，则子类必定是抽象类的种类，而接口实现则是有没有、具备不具备的关系。 
          比如：将鸟设计为一个类Bird，但是不能将 飞行 这个特性也设计为类，因此它只是一个行为特性，并不是对一类事物的抽象描述。
          此时可以将 飞行 设计为一个接口Fly，包含方法fly( )，对于不同种类的鸟直接继承Bird类即可，
          而鸟是否能飞（或者是否具备飞行这个特点），能飞行则可以实现这个接口，不能飞行就不实现这个接口。
      3） 设计层面不同，抽象类作为很多子类的父类，它是一种模板式设计。而接口是一种行为规范，它是一种辐射式设计。 
          对于抽象类，如果需要添加新的方法，可以直接在抽象类中添加具体的实现，子类可以不进行变更；
          而对于接口则不行，如果接口进行了变更，则所有实现这个接口的类都必须进行相应的改动。   

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
