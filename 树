笔试程序
1.题目描述
    操作给定的二叉树，将其变换为源二叉树的镜像。
    输入描述:
    二叉树的镜像定义：源二叉树 
              8
             /  \
            6   10
           / \  / \
          5  7 9 11
          镜像二叉树
              8
             /  \
            10   6
           / \  / \
          11 9 7  5
    /**
    public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }
    }
*/
  public class Solution {
    public void Mirror(TreeNode root) {
        TreeNode temp=null;
        if(root!=null) 
        {
             temp = root.right;
            root.right=root.left;
            root.left=temp;
            if(root.left!=null)
            {
                Mirror(root.left);
            }
            if(root.right!=null)
            {
                Mirror(root.right);
            }
        }
        else return; 
    }
}

2.题目描述
  输入一棵二叉树，判断该二叉树是否是平衡二叉树。
  public class Solution {
    //判断根节点左右子树的深度，高度差超过1，则不平衡
    public boolean IsBalanced_Solution(TreeNode root) {
        if (root==null) {
            return true;
        }
        int left = getTreeDepth(root.left);
        int right = getTreeDepth(root.right);
        return Math.abs(left-right)>1?false:true;
    }
    //求取节点的深度
    public static int getTreeDepth(TreeNode root) {
        if (root==null) {
            return 0;
        }
        int leftDepth = 1+getTreeDepth(root.left);
        int rightDepth = 1+getTreeDepth(root.right);
        return leftDepth>rightDepth?leftDepth:rightDepth;
    }
}

3.题目描述
  输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。
  public class Solution {
  public int TreeDepth(TreeNode pRoot)
    {
     if(pRoot == null)
            return 0;
        if(pRoot.left == null && pRoot.right == null)
            return 1;
        int left = TreeDepth(pRoot.left);
        int right = TreeDepth(pRoot.right);
        
        return left > right ? left + 1 : right + 1;
    }
 }
 
 4.题目描述
   给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。
   public class Solution {
    public TreeLinkNode GetNext(TreeLinkNode pNode)
    {
        if(pNode==null) return null;
        if(pNode.right!=null){
            pNode=pNode.right;
            while(pNode.left!=null){
                pNode=pNode.left;
            }
            return pNode;
        }
        while(pNode.next!=null){
            while(pNode.next.left==pNode) return pNode.next;
            pNode=pNode.next;
        }
        return null;
    }
  }
  
  5.题目描述
    请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。
    /*思路：首先根节点以及其左右子树，左子树的左子树和右子树的右子树相同
    * 左子树的右子树和右子树的左子树相同即可，采用递归
    * 非递归也可，采用栈或队列存取各级子树根节点
    */
    public class Solution {
        boolean isSymmetrical(TreeNode pRoot)
        {
            if(pRoot == null){
                return true;
            }
            return comRoot(pRoot.left, pRoot.right);
        }
        private boolean comRoot(TreeNode left, TreeNode right) {
            // TODO Auto-generated method stub
            if(left == null) return right==null;
            if(right == null) return false;
            if(left.val != right.val) return false;
            return comRoot(left.right, right.left) && comRoot(left.left, right.right);
        }
    }
    
  6.题目描述
    从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。
    import java.util.*;
    public class Solution {
        ArrayList<ArrayList<Integer> > Print(TreeNode pRoot) {
            ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
            if(pRoot == null){
                return result;
            }
            Queue<TreeNode> layer = new LinkedList<TreeNode>();
            ArrayList<Integer> layerList = new ArrayList<Integer>();
            layer.add(pRoot);
            int start = 0, end = 1;
            while(!layer.isEmpty()){
                TreeNode cur = layer.remove();
                layerList.add(cur.val);
                start++;
                if(cur.left!=null){
                    layer.add(cur.left);           
                }
                if(cur.right!=null){
                    layer.add(cur.right);
                }
                if(start == end){
                    end = layer.size();
                    start = 0;
                    result.add(layerList);
                    layerList = new ArrayList<Integer>();
                }
            }
            return result;
        }
    }
    
    7.
    /*
       * 题目：Z字形打印二叉树
       *
       * 思路:
       * 借助两个栈stack1,stack2.
       * 先让首节点接入stack1，然后奇数行时stack1中节点的孩子出队列加入stack2（按先左孩子再右孩子的顺序），并加入链中
       * 偶数行时出stack2中节点的孩子加入stack1(按先右孩子后左孩子的顺序)，并加入链
       */
      import java.util.Stack;
      import java.util.ArrayList;
      class Solution{
      public ArrayList<ArrayList<Integer> > Print(TreeNode pRoot)
      {
          ArrayList<ArrayList<Integer>> zTreeList = new ArrayList<>();                                                                                                                                         
          if(pRoot == null)
          {
              return zTreeList;
          }
          Stack<TreeNode> oddStack = new Stack<>();//奇数行栈
          Stack<TreeNode> evenStack = new Stack<>();//偶数行栈
          boolean isOdd = true;
          oddStack.add(pRoot);
          while(!(oddStack.isEmpty() && evenStack.isEmpty()))
          {//树没有遍历完
              ArrayList<Integer> currentList = new ArrayList<>();
              if(isOdd == true)
              {//奇数行，stack1中节点的孩子节点按先左孩子后右孩子的顺序入栈2
                  while(!oddStack.isEmpty())
                  {
                      TreeNode currentNode = oddStack.peek(); //取队栈顶元素
                      currentList.add(currentNode.val); //添加当前列表
                      if(currentNode.left != null)
                      {
                          evenStack.push(currentNode.left);
                      }
                      if(currentNode.right != null)
                      {
                          evenStack.push(currentNode.right);
                      }
                      oddStack.pop(); //栈顶元素出栈
                  }
                  zTreeList.add(currentList);//加入当前行
                  isOdd = false; //更新下一层扫描树为偶数行
              }
              else
              {//偶数行,stack2中元素节点的孩子按先右孩子孩子后左孩子顺序入stack1
                  while(!evenStack.isEmpty())
                  {
                      TreeNode currentNode = evenStack.peek(); //获取栈顶元素
                      currentList.add(currentNode.val);
                      if(currentNode.right != null)
                      {
                          oddStack.add(currentNode.right);
                      }
                      if(currentNode.left != null)
                      {
                          oddStack.add(currentNode.left);
                      }
                      evenStack.pop();
                  }
                  zTreeList.add(currentList);
                  isOdd = true;
              }
          }
          return zTreeList;
      }
      }

8.题目描述
  给定一颗二叉搜索树，请找出其中的第k小的结点。例如， 5 / \ 3 7 /\ /\ 2 4 6 8 中，按结点数值大小顺序第三个结点的值为4。
  import java.util.Stack;
  public class Solution {
  TreeNode KthNode(TreeNode root, int k){
          if(root==null||k==0)
              return null;
          Stack<TreeNode> stack = new Stack<TreeNode>();
          int count = 0;
          TreeNode node = root;
          do{
              if(node!=null){
                  stack.push(node);
                  node = node.left;
              }else{
                  node = stack.pop();
                  count++;
                  if(count==k)
                      return node;
                  node = node.right;
              }
          }while(node!=null||!stack.isEmpty());
          return null;
      }
  }
  
  9.题目描述
    输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。
    例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
    public class Solution {
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
          TreeNode root=new TreeNode(pre[0]);//前序的第一个数定为根  
    int len=pre.length;  
    //当只有一个数的时候  
    if(len==1){  
        root.left=null;  
        root.right=null;  
        return root;  
    }  
    //找到中序中的根位置  
    int rootval=root.val;  
    int i;  
    for(i=0;i<len;i++){  
        if(rootval==in[i])  
            break;  
    }  
    //创建左子树  
    if(i>0){  
        int[] pr=new int[i];  
        int[] ino=new int[i];  
        for(int j=0;j<i;j++){  
            pr[j]=pre[j+1];  
        }  
        for(int j=0;j<i;j++){  
            ino[j]=in[j];  
        }  
        root.left=reConstructBinaryTree(pr,ino);  
    }else{  
        root.left=null;  
    }  
    //创建右子树  
    if(len-i-1>0){  
        int[] pr=new int[len-i-1];  
        int[] ino=new int[len-i-1];  
        for(int j=i+1;j<len;j++){  
            ino[j-i-1]=in[j];  
            pr[j-i-1]=pre[j];  
        }  
        root.right=reConstructBinaryTree(pr,ino);  
    }else{  
        root.right=null;  
    }   
    return root;  
    }
}

10.题目描述
    Given a binary tree, find its minimum depth.The minimum depth is the number of 
    nodes along the shortest path from the root node down to the nearest leaf node.
    
    public class Solution {
        public int run(TreeNode root) {
            if(root==null) return 0;
             //else if(root.right==null&&oot.left==null) return 1;
             else if(root.right==null) return run(root.left)+1;
            else if(root.left==null) return run(root.right)+1;
            else return Math.min(run(root.left),run(root.right))+1;
        }
    }
    
11.题目描述
    Given a binary tree, return the postorder traversal of its nodes' values.
    For example:
    Given binary tree{1,#,2,3},
       1
        \
         2
        /
       3
    return[3,2,1].
    Note: Recursive solution is trivial, could you do it iteratively?
    
    import java.util.ArrayList;
    import java.util.Stack;;
    public class Solution {
     public ArrayList<Integer> postorderTraversal(TreeNode root) {
          ArrayList<Integer> list = new ArrayList<>();
          Stack<TreeNode> stack = new Stack<>();
          if (root == null) return list;
          stack.push(root);
          while (!stack.isEmpty()) {
              TreeNode node = stack.pop();
              list.add(0, node.val);//每次插入到头部
              if (node.left != null) stack.push(node.left);
              if (node.right != null) stack.push(node.right);
          }
          return list;
        }
     }
     
12. 题目描述
    Given a binary tree, return the preorder traversal of its nodes' values.
    For example:
    Given binary tree{1,#,2,3},
       1
        \
         2
        /
       3

    return[1,2,3].
    Note: Recursive solution is trivial, could you do it iteratively?
    
    import java.util.ArrayList;
    import java.util.Stack;
    public class Solution {
        public ArrayList<Integer> preorderTraversal(TreeNode root) {
            ArrayList<Integer> list=new ArrayList<Integer> ();
            Stack<TreeNode> sta=new Stack<TreeNode> ();
            if(root==null) return list;
            sta.push(root);
            while(!sta.isEmpty())
            {
                TreeNode node =sta.pop();
                list.add(node.val);
               if(node.right!=null) sta.push(node.right);
                if(node.left!=null) sta.push(node.left);

            }
            return list;
        }
    }
















